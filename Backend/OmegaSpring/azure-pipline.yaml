# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - master

pool:
  vmImage: 'ubuntu-latest'

steps:

  - task: Maven@3
    inputs:
      mavenPomFile: 'contacts-backend/pom.xml'
      goals: 'clean verify'
      publishJUnitResults: false
      javaHomeOption: 'JDKVersion'
      mavenVersionOption: 'Default'
      mavenAuthenticateFeed: false
      effectivePomSkip: false
      sonarQubeRunAnalysis: false

  - task: Maven@3
    inputs:
      mavenPomFile: 'contacts-external-api-gateway/pom.xml'
      goals: 'clean verify'
      publishJUnitResults: false
      javaHomeOption: 'JDKVersion'
      mavenVersionOption: 'Default'
      mavenAuthenticateFeed: false
      effectivePomSkip: false
      sonarQubeRunAnalysis: false

  - task: Docker@2
    inputs:
      containerRegistry: 'Docker-raghav141988'
      repository: 'raghav141988/contacts-backend'
      command: 'buildAndPush'
      Dockerfile: './contacts-backend/Dockerfile'
      buildContext: './contacts-backend'
      tags: |
        latest
        $(Build.BuildId)

  - task: Docker@2
    inputs:
      containerRegistry: 'Docker-raghav141988'
      repository: 'raghav141988/contacts-external-api-gateway'
      command: 'buildAndPush'
      Dockerfile: './contacts-external-api-gateway/Dockerfile'
      buildContext: './contacts-external-api-gateway'
      tags: |
        latest
        $(Build.BuildId)
  - task: Docker@2
    inputs:
      containerRegistry: 'Docker-raghav141988'
      repository: 'raghav141988/contacts-frontend'
      command: 'buildAndPush'
      Dockerfile: './contacts-frontend/Dockerfile'
      buildContext: './contacts-frontend'
      tags: |
        latest
        $(Build.BuildId)
  - task: Kubernetes@1
    inputs:
      connectionType: 'Kubernetes Service Connection'
      kubernetesServiceEndpoint: 'contactsServiceConnection'
      namespace: 'kube-system'
      command: 'apply'
      arguments: '-f ./contacts-deployment/k8s'
      secretType: 'dockerRegistry'
      containerRegistryType: 'Container Registry'
      dockerRegistryEndpoint: 'Docker-raghav141988'
      secretName: 'docker-secret'
  - task: Kubernetes@1
    inputs:
      connectionType: 'Kubernetes Service Connection'
      kubernetesServiceEndpoint: 'contactsServiceConnection'
      namespace: 'kube-system'
      command: 'set'
      arguments: 'image deployment/contact-frontend-deployment contacts-frontend=raghav141988/contacts-frontend:$(Build.BuildId)'
      secretType: 'dockerRegistry'
      containerRegistryType: 'Container Registry'
      dockerRegistryEndpoint: 'Docker-raghav141988'
  - task: Kubernetes@1
    inputs:
      connectionType: 'Kubernetes Service Connection'
      kubernetesServiceEndpoint: 'contactsServiceConnection'
      namespace: 'kube-system'
      command: 'set'
      arguments: 'image deployment/contact-backend-deployment contacts-api=raghav141988/contacts-backend:$(Build.BuildId)'
      secretType: 'dockerRegistry'
      containerRegistryType: 'Container Registry'
      dockerRegistryEndpoint: 'Docker-raghav141988'
  - task: Kubernetes@1
    inputs:
      connectionType: 'Kubernetes Service Connection'
      kubernetesServiceEndpoint: 'contactsServiceConnection'
      namespace: 'kube-system'
      command: 'set'
      arguments: 'image deployment/contact-contact-backend-api-deployment contacts-backend-api=raghav141988/contacts-external-api-gateway:$(Build.BuildId)'
      secretType: 'dockerRegistry'
      containerRegistryType: 'Container Registry'
      dockerRegistryEndpoint: 'Docker-raghav141988'







      # Deploy to Azure Kubernetes Service
      # Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
      # https://docs.microsoft.com/azure/devops/pipelines/languages/docker

      trigger:
        - master

      resources:
        - repo: self

      variables:

        # Container registry service connection established during pipeline creation
        dockerRegistryServiceConnection: '3efeb1c7-c25d-4ea3-83be-c9d60596897f'
        imageRepository: 'kaomegaspring'
        containerRegistry: 'omegacr.azurecr.io'
        dockerfilePath: '**/Dockerfile'
        tag: '$(Build.BuildId)'
        imagePullSecret: 'omegacr204649d4-auth'

        # Agent VM image name
        vmImageName: 'ubuntu-latest'




      stages:
        - stage: Build
          displayName: Build stage
          jobs:
            - job: Build
              displayName: Build
              pool:
                vmImage: $(vmImageName)
              steps:
                - task: Maven@2
                  inputs:
                    mavenPomFile:'pom.xml'
                    goals:'clean package'
                    publishJUnitResults:false
                    javaHomeOption:'JDKVersion'
                    mavenVersionOption:'Default'
                    mavenAuthenticateFeed:false
                    effectivePomSkip:false
                    sonarQubeRunAnalysis:false
                - task: Docker@3
                  displayName: Build and push an image to container registry
                  inputs:
                    command: buildAndPush
                    repository: $(imageRepository)
                    dockerfile: $(dockerfilePath)
                    containerRegistry: $(dockerRegistryServiceConnection)
                    tags: |
                      $(tag)
                - upload: manifests
                  artifact: manifests


        - stage: Deploy
          displayName: Deploy stage
          dependsOn: Build

          jobs:
            - deployment: Deploy
              displayName: Deploy
              pool:
                vmImage: $(vmImageName)
              environment: 'ka5110OmegaSpring-6628.default'
              strategy:
                runOnce:
                  deploy:
                    steps:
                      - task: KubernetesManifest@0
                        displayName: Create imagePullSecret
                        inputs:
                          action: createSecret
                          secretName: $(imagePullSecret)
                          dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

                      - task: KubernetesManifest@0
                        displayName: Deploy to Kubernetes cluster
                        inputs:
                          action: deploy
                          manifests: |
                            $(Pipeline.Workspace)/manifests/backend-deployment.yml
                            $(Pipeline.Workspace)/manifests/LoadBalancerService.yml
                          imagePullSecrets: |
                            $(imagePullSecret)
                          containers: |
                            $(containerRegistry)/$(imageRepository):$(tag)

